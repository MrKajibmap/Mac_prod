/**************************************************************************** 
 * Job:             001_100_Setup_Events                  A5VLIHEZ.BS000034 * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Blocks/001_Setup                               * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:19:09 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS000034);
%let etls_jobName = %nrquote(001_100_Setup_Events);
%let etls_userID = %nrquote(sasmi);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */ 
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/**************************************************************************** 
 * Job:             001_100_1_Setup_ETL_LEVEL             A5VLIHEZ.BS00002F * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_100_Setup_Events                      * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Source Table:    ETL_LEVEL.csv -                       A5VLIHEZ.BZ000009 * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_L                     * 
 *                  EVEL.csv                                                * 
 * Target Table:    ETL_LEVEL - etl_sys.ETL_LEVEL         A5VLIHEZ.BM00004I * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:19:09 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002F);
%let etls_jobName = %nrquote(001_100_1_Setup_ETL_LEVEL);
%let etls_userID = %nrquote(sasmi);


/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            File Reader                           A5VLIHEZ.BT00008O * 
 * Transform:       File Reader                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    ETL_LEVEL.csv -                       A5VLIHEZ.BZ000009 * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_L                     * 
 *                  EVEL.csv                                                * 
 * Target Table:    File Reader - work.WUN7X2S            A5VLIHEZ.BV000039 * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00008O);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WUN7X2S;
quit;

data work.WUN7X2S / view = work.WUN7X2S ; 
   infile "&ETL_FILE_STATIC_ROOT/etl_sys/ETL_LEVEL.csv"
          lrecl = 256
          delimiter = ';'
          dsd
          missover
          firstobs = 2
          encoding = "utf8"; 
   ; 
   attrib LEVEL_CD length = $2
      format = $2.
      informat = $2.; 
   attrib LEVEL_DESC length = $100
      format = $100.
      informat = $100.; 
   attrib LEVEL_WGT length = 8
      format = 3.
      informat = 3.; 
   
   input LEVEL_CD LEVEL_DESC LEVEL_WGT; 
   
run; 

%rcSet(&syserr); 



/** Step end File Reader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5VLIHEZ.BT00008P * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    File Reader - work.WUN7X2S            A5VLIHEZ.BV000039 * 
 * Target Table:    ETL_LEVEL - etl_sys.ETL_LEVEL         A5VLIHEZ.BM00004I * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00008P);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WUN7X2S); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: true
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(etl_sys.ETL_LEVEL, DATA)) or 
         %sysfunc(exist(etl_sys.ETL_LEVEL, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data etl_sys.ETL_LEVEL
              (dbnull = (
                         LEVEL_CD = NO
                         LEVEL_DESC = YES
                         LEVEL_WGT = YES));
         attrib LEVEL_CD length = $2
            format = $2.
            informat = $2.
            label = 'LEVEL_CD'; 
         attrib LEVEL_DESC length = $100
            format = $100.
            informat = $100.
            label = 'LEVEL_DESC'; 
         attrib LEVEL_WGT length = 8
            label = 'LEVEL_WGT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc sql;
         connect to ORACLE
         ( 
             DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            alter table ETL_SYS.ETL_LEVEL      
               add primary key (LEVEL_CD)
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit;
      
      %rcSet(&sqlrc); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(etl_sys.ETL_LEVEL, DATA)) or 
            %sysfunc(exist(etl_sys.ETL_LEVEL, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set etl_sys.ETL_LEVEL( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update etl_sys.ETL_LEVEL as m
            set LEVEL_DESC = (select LEVEL_DESC from &etls_lastTable as t 
                                where m.LEVEL_CD = t.LEVEL_CD),
                   LEVEL_WGT = (select LEVEL_WGT from &etls_lastTable as t 
                                where m.LEVEL_CD = t.LEVEL_CD)
               where exists (select * from &etls_lastTable as t
                                   where m.LEVEL_CD = t.LEVEL_CD);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from etl_sys.ETL_LEVEL
                   as m 
                                      where m.LEVEL_CD = t.LEVEL_CD)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = etl_sys.ETL_LEVEL 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;



/** Step end Table Loader **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_100_1_Setup_ETL_LEVEL **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000034);
%let etls_jobName = %nrquote(001_100_Setup_Events);

/**************************************************************************** 
 * Job:             001_100_2_Setup_ETL_EVENT_TYPE        A5VLIHEZ.BS00002G * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_100_Setup_Events                      * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Source Table:    ETL_EVENT_TYPE.csv -                  A5VLIHEZ.BZ000007 * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_E                     * 
 *                  VENT_TYPE.csv                                           * 
 * Target Table:    ETL_EVENT_TYPE -                      A5VLIHEZ.BM00004D * 
 *                   etl_sys.ETL_EVENT_TYPE                                 * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:19:09 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002G);
%let etls_jobName = %nrquote(001_100_2_Setup_ETL_EVENT_TYPE);
%let etls_userID = %nrquote(sasmi);


/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            File Reader                           A5VLIHEZ.BT00008Q * 
 * Transform:       File Reader                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    ETL_EVENT_TYPE.csv -                  A5VLIHEZ.BZ000007 * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_E                     * 
 *                  VENT_TYPE.csv                                           * 
 * Target Table:    File Reader - work.W2D4AKGO           A5VLIHEZ.BV00003A * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00008Q);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2D4AKGO;
quit;

data work.W2D4AKGO / view = work.W2D4AKGO ; 
   infile "&ETL_FILE_STATIC_ROOT/etl_sys/ETL_EVENT_TYPE.csv"
          lrecl = 256
          delimiter = ';'
          dsd
          missover
          firstobs = 2
          encoding = "utf8"; 
   ; 
   attrib EVENT_TYPE_ID length = 8
      format = 21.
      informat = 21.; 
   attrib EVENT_TYPE_CD length = $32
      format = $32.
      informat = $32.; 
   attrib EVENT_TYPE_DESC length = $100
      format = $100.
      informat = $100.; 
   attrib LEVEL_CD length = $2
      format = $2.
      informat = $2.; 
   
   input EVENT_TYPE_ID EVENT_TYPE_CD EVENT_TYPE_DESC LEVEL_CD; 
   
run; 

%rcSet(&syserr); 



/** Step end File Reader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5VLIHEZ.BT00008R * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    File Reader - work.W2D4AKGO           A5VLIHEZ.BV00003A * 
 * Target Table:    ETL_EVENT_TYPE -                      A5VLIHEZ.BM00004D * 
 *                   etl_sys.ETL_EVENT_TYPE                                 * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00008R);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W2D4AKGO); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: true
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(etl_sys.ETL_EVENT_TYPE, DATA)) or 
         %sysfunc(exist(etl_sys.ETL_EVENT_TYPE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data etl_sys.ETL_EVENT_TYPE
              (dbnull = (
                         EVENT_TYPE_ID = NO
                         EVENT_TYPE_CD = NO
                         EVENT_TYPE_DESC = YES
                         LEVEL_CD = YES));
         attrib EVENT_TYPE_ID length = 8
            label = 'EVENT_TYPE_ID'; 
         attrib EVENT_TYPE_CD length = $32
            format = $32.
            informat = $32.
            label = 'EVENT_TYPE_CD'; 
         attrib EVENT_TYPE_DESC length = $100
            format = $100.
            informat = $100.
            label = 'EVENT_TYPE_DESC'; 
         attrib LEVEL_CD length = $2
            format = $2.
            informat = $2.
            label = 'LEVEL_CD'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc sql;
         connect to ORACLE
         ( 
             DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            alter table ETL_SYS.ETL_EVENT_TYPE      
               add primary key (EVENT_TYPE_ID)
               add foreign key (LEVEL_CD) references ETL_SYS.ETL_LEVEL
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit;
      
      %rcSet(&sqlrc); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(etl_sys.ETL_EVENT_TYPE, DATA)) or 
            %sysfunc(exist(etl_sys.ETL_EVENT_TYPE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set etl_sys.ETL_EVENT_TYPE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update etl_sys.ETL_EVENT_TYPE as m
            set EVENT_TYPE_CD = (select EVENT_TYPE_CD from &etls_lastTable as t 
                                where m.EVENT_TYPE_ID = t.EVENT_TYPE_ID),
                   EVENT_TYPE_DESC = (select EVENT_TYPE_DESC from &etls_lastTable as t 
                                where m.EVENT_TYPE_ID = t.EVENT_TYPE_ID),
                   LEVEL_CD = (select LEVEL_CD from &etls_lastTable as t 
                                where m.EVENT_TYPE_ID = t.EVENT_TYPE_ID)
               where exists (select * from &etls_lastTable as t
                                   where m.EVENT_TYPE_ID = t.EVENT_TYPE_ID);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from etl_sys.ETL_EVENT_TYPE
                   as m 
                                      where m.EVENT_TYPE_ID = t.EVENT_TYPE_ID)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = etl_sys.ETL_EVENT_TYPE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;



/** Step end Table Loader **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_100_2_Setup_ETL_EVENT_TYPE **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000034);
%let etls_jobName = %nrquote(001_100_Setup_Events);

/**************************************************************************** 
 * Job:             001_100_3_Setup_ETL_FORMAT            A5VLIHEZ.BS00002H * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_100_Setup_Events                      * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Source Table:    ETL_FORMAT.csv -                      A5VLIHEZ.BZ000008 * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_F                     * 
 *                  ORMAT.csv                                               * 
 * Target Table:    ETL_FORMAT - etl_sys.ETL_FORMAT       A5VLIHEZ.BM00004F * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:19:09 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002H);
%let etls_jobName = %nrquote(001_100_3_Setup_ETL_FORMAT);
%let etls_userID = %nrquote(sasmi);


/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            File Reader                           A5VLIHEZ.BT00008S * 
 * Transform:       File Reader                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    ETL_FORMAT.csv -                      A5VLIHEZ.BZ000008 * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_F                     * 
 *                  ORMAT.csv                                               * 
 * Target Table:    File Reader - work.W2E7LOZW           A5VLIHEZ.BV00003B * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00008S);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2E7LOZW;
quit;

data work.W2E7LOZW / view = work.W2E7LOZW ; 
   infile "&ETL_FILE_STATIC_ROOT/etl_sys/ETL_FORMAT.csv"
          lrecl = 1024
          delimiter = ';'
          dsd
          missover
          firstobs = 2
          encoding = "utf8"; 
   ; 
   attrib FORMAT_NM length = $32
      format = $32.
      informat = $32.; 
   attrib FORMAT_GROUP_CD length = $32
      format = $32.
      informat = $32.; 
   attrib FORMAT_TYPE_CD length = $1
      format = $1.
      informat = $1.; 
   attrib LIBRARY_NM length = $8
      format = $8.
      informat = $8.; 
   attrib TABLE_NM length = $32
      format = $32.
      informat = $32.; 
   attrib START_COL_NM length = $32
      format = $32.
      informat = $32.; 
   attrib END_COL_NM length = $32
      format = $32.
      informat = $32.; 
   attrib LABEL_COL_NM length = $32
      format = $32.
      informat = $32.; 
   attrib OTHER_VALUE_TXT length = $100
      format = $100.
      informat = $100.; 
   attrib HLO_CD length = $1
      format = $1.
      informat = $1.; 
   attrib WHERE_TXT length = $100
      format = $100.
      informat = $100.; 
   
   input FORMAT_NM FORMAT_GROUP_CD FORMAT_TYPE_CD LIBRARY_NM TABLE_NM 
         START_COL_NM END_COL_NM LABEL_COL_NM OTHER_VALUE_TXT HLO_CD WHERE_TXT; 
   
run; 

%rcSet(&syserr); 



/** Step end File Reader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5VLIHEZ.BT00008T * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    File Reader - work.W2E7LOZW           A5VLIHEZ.BV00003B * 
 * Target Table:    ETL_FORMAT - etl_sys.ETL_FORMAT       A5VLIHEZ.BM00004F * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00008T);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W2E7LOZW); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - Delete
   Constraint and index action selections: 'INIT','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(etl_sys.ETL_FORMAT, DATA)) or 
         %sysfunc(exist(etl_sys.ETL_FORMAT, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data etl_sys.ETL_FORMAT
              (dbnull = (
                         FORMAT_NM = NO
                         FORMAT_GROUP_CD = YES
                         FORMAT_TYPE_CD = NO
                         LIBRARY_NM = YES
                         TABLE_NM = NO
                         START_COL_NM = NO
                         END_COL_NM = YES
                         LABEL_COL_NM = NO
                         OTHER_VALUE_TXT = YES
                         HLO_CD = YES
                         WHERE_TXT = YES));
         attrib FORMAT_NM length = $32
            format = $32.
            informat = $32.
            label = 'FORMAT_NM'; 
         attrib FORMAT_GROUP_CD length = $32
            format = $32.
            informat = $32.
            label = 'FORMAT_GROUP_CD'; 
         attrib FORMAT_TYPE_CD length = $1
            format = $1.
            informat = $1.
            label = 'FORMAT_TYPE_CD'; 
         attrib LIBRARY_NM length = $8
            format = $8.
            informat = $8.
            label = 'LIBRARY_NM'; 
         attrib TABLE_NM length = $32
            format = $32.
            informat = $32.
            label = 'TABLE_NM'; 
         attrib START_COL_NM length = $32
            format = $32.
            informat = $32.
            label = 'START_COL_NM'; 
         attrib END_COL_NM length = $32
            format = $32.
            informat = $32.
            label = 'END_COL_NM'; 
         attrib LABEL_COL_NM length = $32
            format = $32.
            informat = $32.
            label = 'LABEL_COL_NM'; 
         attrib OTHER_VALUE_TXT length = $100
            format = $100.
            informat = $100.
            label = 'OTHER_VALUE_TXT'; 
         attrib HLO_CD length = $1
            format = $1.
            informat = $1.
            label = 'HLO_CD'; 
         attrib WHERE_TXT length = $100
            format = $100.
            informat = $100.
            label = 'WHERE_TXT'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc sql;
         connect to ORACLE
         ( 
             DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            alter table ETL_SYS.ETL_FORMAT      
               add primary key (FORMAT_NM)
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit;
      
      %rcSet(&sqlrc); 
      
   %end;  /* if table does not exist  */ 
   
   %else 
   %do;  /* table exists */ 
      /*---- Deleting all rows  ----*/ 
      %put %str(NOTE: Deleting all rows ...);
      proc sql;
         connect to ORACLE
         ( 
             DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            delete from ETL_SYS.ETL_FORMAT
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit; 
      
      %rcSet(&sqlrc); 
      
   %end; /* table exists */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = etl_sys.ETL_FORMAT 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
%mend etls_loader;
%etls_loader;



/** Step end Table Loader **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_100_3_Setup_ETL_FORMAT **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000034);
%let etls_jobName = %nrquote(001_100_Setup_Events);

/**************************************************************************** 
 * Job:             001_100_4_Setup_Build_Formats_Events  A5VLIHEZ.BS00002I * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_100_Setup_Events                      * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:19:10 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002I);
%let etls_jobName = %nrquote(001_100_4_Setup_Build_Formats_Events);
%let etls_userID = %nrquote(sasmi);


/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Обновление группы форматов            A5VLIHEZ.BT00008U * 
 * Transform:       Обновление группы форматов                              * 
 * Description:     Создает (перестраивает) группу форматов                 * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00008U);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let tpFmtGroup = %nrquote(001_100_Setup_Events            );
%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_format_group_gen.sas 2947:dfe3d214f2e2 2014-05-20 11:26:53Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Обновляет группу форматов (ETL_FORMAT).
*
*  ПАРАМЕТРЫ:
*     tpFmtGroup              +  имя группы форматов
*
******************************************************************/

%macro transform_format_group_gen;
   %if &tpFmtGroup ne _ALL_VALUES_ %then %do;
      %format_gen (mpFmtGroup=&tpFmtGroup);
   %end;
   %else %do;
      %format_gen;
   %end;
%mend transform_format_group_gen;

%transform_format_group_gen;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Обновление группы форматов **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_100_4_Setup_Build_Formats_Events **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000034);
%let etls_jobName = %nrquote(001_100_Setup_Events);

%let etls_endTime = %sysfunc(datetime(),datetime.);

