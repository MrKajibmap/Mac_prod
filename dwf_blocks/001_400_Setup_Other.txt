/**************************************************************************** 
 * Job:             001_400_Setup_Other                   A5VLIHEZ.BS000037 * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Blocks/001_Setup                               * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:23:21 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS000037);
%let etls_jobName = %nrquote(001_400_Setup_Other);
%let etls_userID = %nrquote(sasmi);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */ 
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать поток                          A5VLIHEZ.BT00007J * 
 * Transform:       Начать поток                                            * 
 * Description:     Открывает поток загрузки                                * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00007J);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_stream_start.sas 3629:0a610733da87 2014-12-22 12:21:10Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Регистрирует начало потока ETL.
*
*  ПАРАМЕТРЫ:
*     нет
*
******************************************************************/

%macro transform_stream_start;
   %etl_stream_start;
%mend transform_stream_start;

%transform_stream_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Начать поток **/

/**************************************************************************** 
 * Job:             001_400_1_Setup_ORA_FUNCTION_MAP      A5VLIHEZ.BS00002V * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_400_Setup_Other                       * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Source Table:    ORA_FUNCTION_MAP.csv -                A5VLIHEZ.BZ00000I * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ORA_F                     * 
 *                  UNCTION_MAP.csv                                         * 
 * Target Table:    ORA_FUNCTION_MAP -                    A5VLIHEZ.BM00004Y * 
 *                   etl_sys.ORA_FUNCTION_MAP                               * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:23:21 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002V);
%let etls_jobName = %nrquote(001_400_1_Setup_ORA_FUNCTION_MAP);
%let etls_userID = %nrquote(sasmi);


/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5VLIHEZ.BT0000AA * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AA);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_job_start.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Регистрирует начало модуля ETL.
*
*  ПАРАМЕТРЫ:
*     нет
*
******************************************************************/

%macro transform_job_start;
   %etl_job_start;
%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Начать модуль **/

/*==========================================================================* 
 * Step:            File Reader                           A5VLIHEZ.BT0000AB * 
 * Transform:       File Reader                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    ORA_FUNCTION_MAP.csv -                A5VLIHEZ.BZ00000I * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ORA_F                     * 
 *                  UNCTION_MAP.csv                                         * 
 * Target Table:    File Reader - work.W1784L3K           A5VLIHEZ.BV00003O * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AB);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W1784L3K;
quit;

data work.W1784L3K / view = work.W1784L3K ; 
   infile "&ETL_FILE_STATIC_ROOT/etl_sys/ORA_FUNCTION_MAP.csv"
          lrecl = 256
          delimiter = ';'
          dsd
          missover
          firstobs = 2
          encoding = "utf8"; 
   ; 
   attrib SASFUNCNAME length = $32
      format = $32.
      informat = $32.; 
   attrib SASFUNCNAMELEN length = 8; 
   attrib DBMSFUNCNAME length = $50
      format = $50.
      informat = $50.; 
   attrib DBMSFUNCNAMELEN length = 8; 
   attrib FUNCTION_CATEGORY length = $20
      format = $20.
      informat = $20.; 
   attrib FUNC_USAGE_CONTEXT length = $20
      format = $20.
      informat = $20.; 
   attrib FUNCTION_RETURNTYP length = $20
      format = $20.
      informat = $20.; 
   attrib FUNCTION_NUM_ARGS length = 8; 
   attrib CONVERT_ARGS length = 8; 
   attrib ENGINEINDEX length = 8; 
   
   input SASFUNCNAME SASFUNCNAMELEN DBMSFUNCNAME DBMSFUNCNAMELEN 
         FUNCTION_CATEGORY FUNC_USAGE_CONTEXT FUNCTION_RETURNTYP 
         FUNCTION_NUM_ARGS CONVERT_ARGS ENGINEINDEX; 
   
run; 

%rcSet(&syserr); 



/** Step end File Reader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5VLIHEZ.BT0000AC * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    File Reader - work.W1784L3K           A5VLIHEZ.BV00003O * 
 * Target Table:    ORA_FUNCTION_MAP -                    A5VLIHEZ.BM00004Y * 
 *                   etl_sys.ORA_FUNCTION_MAP                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AC);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W1784L3K); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - Truncate
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(etl_sys.ORA_FUNCTION_MAP, DATA)) or 
         %sysfunc(exist(etl_sys.ORA_FUNCTION_MAP, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data etl_sys.ORA_FUNCTION_MAP
              (dbnull = (
                         SASFUNCNAME = NO
                         SASFUNCNAMELEN = NO
                         DBMSFUNCNAME = NO
                         DBMSFUNCNAMELEN = NO
                         FUNCTION_CATEGORY = YES
                         FUNC_USAGE_CONTEXT = YES
                         FUNCTION_RETURNTYP = YES
                         FUNCTION_NUM_ARGS = YES
                         CONVERT_ARGS = YES
                         ENGINEINDEX = YES));
         attrib SASFUNCNAME length = $32
            format = $32.
            informat = $32.
            label = 'SASFUNCNAME'; 
         attrib SASFUNCNAMELEN length = 8
            label = 'SASFUNCNAMELEN'; 
         attrib DBMSFUNCNAME length = $50
            format = $50.
            informat = $50.
            label = 'DBMSFUNCNAME'; 
         attrib DBMSFUNCNAMELEN length = 8
            label = 'DBMSFUNCNAMELEN'; 
         attrib FUNCTION_CATEGORY length = $20
            format = $20.
            informat = $20.
            label = 'FUNCTION_CATEGORY'; 
         attrib FUNC_USAGE_CONTEXT length = $20
            format = $20.
            informat = $20.
            label = 'FUNC_USAGE_CONTEXT'; 
         attrib FUNCTION_RETURNTYP length = $20
            format = $20.
            informat = $20.
            label = 'FUNCTION_RETURNTYP'; 
         attrib FUNCTION_NUM_ARGS length = 8
            label = 'FUNCTION_NUM_ARGS'; 
         attrib CONVERT_ARGS length = 8
            label = 'CONVERT_ARGS'; 
         attrib ENGINEINDEX length = 8
            label = 'ENGINEINDEX'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %else 
   %do;  /* table exists */ 
      /*---- Truncate a table  ----*/ 
      %put %str(NOTE: Truncating table ...);
      proc sql;
         connect to ORACLE
         ( 
             DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            truncate table ETL_SYS.ORA_FUNCTION_MAP
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit; 
      
      %rcSet(&sqlrc); 
      
   %end; /* table exists */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = etl_sys.ORA_FUNCTION_MAP 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
%mend etls_loader;
%etls_loader;



/** Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5VLIHEZ.BT0000AD * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;
   %etl_job_finish;
%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_400_1_Setup_ORA_FUNCTION_MAP **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000037);
%let etls_jobName = %nrquote(001_400_Setup_Other);

/**************************************************************************** 
 * Job:             001_400_2_Setup_PARTITION_X_DATE      A5VLIHEZ.BS00002W * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_400_Setup_Other                       * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Source Table:    ETL_PARTITION_X_DATE.csv -            A5VLIHEZ.BZ00000C * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_P                     * 
 *                  ARTITION_X_DATE.csv                                     * 
 * Target Table:    ETL_PARTITION_X_DATE -                A5VLIHEZ.BM00004M * 
 *                   etl_sys.ETL_PARTITION_X_DATE                           * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:23:21 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002W);
%let etls_jobName = %nrquote(001_400_2_Setup_PARTITION_X_DATE);
%let etls_userID = %nrquote(sasmi);


/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5VLIHEZ.BT0000AE * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AE);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_job_start.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Регистрирует начало модуля ETL.
*
*  ПАРАМЕТРЫ:
*     нет
*
******************************************************************/

%macro transform_job_start;
   %etl_job_start;
%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Начать модуль **/

/*==========================================================================* 
 * Step:            File Reader                           A5VLIHEZ.BT0000AF * 
 * Transform:       File Reader                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    ETL_PARTITION_X_DATE.csv -            A5VLIHEZ.BZ00000C * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/ETL_P                     * 
 *                  ARTITION_X_DATE.csv                                     * 
 * Target Table:    File Reader - work.W31H8K5            A5VLIHEZ.BV00003P * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AF);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W31H8K5;
quit;

data work.W31H8K5 / view = work.W31H8K5 ; 
   infile "&ETL_FILE_STATIC_ROOT/etl_sys/ETL_PARTITION_X_DATE.csv"
          lrecl = 256
          delimiter = ';'
          dsd
          missover
          firstobs = 2; 
   ; 
   attrib ID_PART length = $10; 
   attrib ACTUAL_DT length = 8; 
   attrib INTERFACE_NAME length = $50; 
   attrib SUB_TYPE length = $8; 
   
   input ID_PART ACTUAL_DT INTERFACE_NAME SUB_TYPE; 
   
run; 

%rcSet(&syserr); 



/** Step end File Reader **/

/*==========================================================================* 
 * Step:            Table Loader                          A5VLIHEZ.BT0000AG * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    File Reader - work.W31H8K5            A5VLIHEZ.BV00003P * 
 * Target Table:    ETL_PARTITION_X_DATE -                A5VLIHEZ.BM00004M * 
 *                   etl_sys.ETL_PARTITION_X_DATE                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AG);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.W31H8K5); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=Skip, New=AppendProc
   Blanks may replace non-blanks: true
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WEFBL3A;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.WEFBL3A as
         select
            ID_PART   
               format = $10.
               informat = $10.,
            ACTUAL_DT   
               format = DATETIME20.
               informat = DATETIME20.,
            INTERFACE_NAME   
               format = $50.
               informat = $50.,
            SUB_TYPE   
               format = $8.
               informat = $8.
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.WEFBL3A;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(etl_sys.ETL_PARTITION_X_DATE, DATA)) or 
         %sysfunc(exist(etl_sys.ETL_PARTITION_X_DATE, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data etl_sys.ETL_PARTITION_X_DATE
              (dbnull = (
                         ID_PART = NO
                         ACTUAL_DT = YES
                         INTERFACE_NAME = NO
                         SUB_TYPE = YES));
         attrib ID_PART length = $10
            format = $10.
            informat = $10.
            label = 'ID_PART'; 
         attrib ACTUAL_DT length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'ACTUAL_DT'; 
         attrib INTERFACE_NAME length = $50
            format = $50.
            informat = $50.
            label = 'INTERFACE_NAME'; 
         attrib SUB_TYPE length = $8
            format = $8.
            informat = $8.
            label = 'SUB_TYPE'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(etl_sys.ETL_PARTITION_X_DATE, DATA)) or 
            %sysfunc(exist(etl_sys.ETL_PARTITION_X_DATE, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set etl_sys.ETL_PARTITION_X_DATE( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from etl_sys.ETL_PARTITION_X_DATE
                   as m 
                                      where m.ID_PART = t.ID_PART and 
                                            m.INTERFACE_NAME = t.INTERFACE_NAME and 
                                            m.SUB_TYPE = t.SUB_TYPE)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = etl_sys.ETL_PARTITION_X_DATE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WEFBL3A;
   quit;
   
%mend etls_loader;
%etls_loader;



/** Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5VLIHEZ.BT0000AH * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AH);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;
   %etl_job_finish;
%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_400_2_Setup_PARTITION_X_DATE **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000037);
%let etls_jobName = %nrquote(001_400_Setup_Other);

/**************************************************************************** 
 * Job:             001_400_3_Setup_SOURCE_SYSTEM         A5VLIHEZ.BS00002X * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_400_Setup_Other                       * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Source Table:    SOURCE_SYSTEM.csv -                   A5VLIHEZ.BZ00000J * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/SOURC                     * 
 *                  E_SYSTEM.csv                                            * 
 * Target Table:    SOURCE_SYSTEM - etl_sys.SOURCE_SYSTEM A5VLIHEZ.BM000050 * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:23:21 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002X);
%let etls_jobName = %nrquote(001_400_3_Setup_SOURCE_SYSTEM);
%let etls_userID = %nrquote(sasmi);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(rusrpomag01.rus.sas.com);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5VLIHEZ.BT0000AI * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AI);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_job_start.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Регистрирует начало модуля ETL.
*
*  ПАРАМЕТРЫ:
*     нет
*
******************************************************************/

%macro transform_job_start;
   %etl_job_start;
%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Начать модуль **/

/*==========================================================================* 
 * Step:            File Reader                           A5VLIHEZ.BT0000AJ * 
 * Transform:       File Reader                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    SOURCE_SYSTEM.csv -                   A5VLIHEZ.BZ00000J * 
 *                  &ETL_FILE_STATIC_ROOT/etl_sys/SOURC                     * 
 *                  E_SYSTEM.csv                                            * 
 * Target Table:    File Reader - work.WN41XH             A5VLIHEZ.BV00003Q * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AJ);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_WN41XH;
quit;

data work.etls_WN41XH / view = work.etls_WN41XH ; 
   infile "&ETL_FILE_STATIC_ROOT/etl_sys/SOURCE_SYSTEM.csv"
          lrecl = 256
          delimiter = ';'
          dsd
          missover
          firstobs = 2
          encoding = "utf8"; 
   ; 
   attrib SOURCE_SYSTEM_CD length = $3
      format = $3.
      informat = $3.; 
   attrib LANGUAGE_CD length = $3
      format = $3.
      informat = $3.; 
   attrib SOURCE_SYSTEM_DESC length = $100
      format = $100.
      informat = $100.; 
   attrib X_SOURCE_SYSTEM_NO length = 8; 
   
   input SOURCE_SYSTEM_CD LANGUAGE_CD SOURCE_SYSTEM_DESC X_SOURCE_SYSTEM_NO; 
   
run; 

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WN41XH;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WN41XH as
      select
         SOURCE_SYSTEM_CD,
         LANGUAGE_CD,
         SOURCE_SYSTEM_DESC,
         X_SOURCE_SYSTEM_NO   
            format = 11.
            informat = 11.,
         (&JOB_START_DTTM) as VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM',
         (&ETL_SCD_FUTURE_DTTM) as VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM',
         (&JOB_START_DTTM) as PROCESSED_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'PROCESSED_DTTM'
   from work.etls_WN41XH
   ;
quit;

%let SYSLAST = work.WN41XH;



/** Step end File Reader **/

/*==========================================================================* 
 * Step:            SCD Type 2                            A5VLIHEZ.BT0000AK * 
 * Transform:       SCD Type 2                                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    File Reader - work.WN41XH             A5VLIHEZ.BV00003Q * 
 * Target Table:    SOURCE_SYSTEM - etl_sys.SOURCE_SYSTEM A5VLIHEZ.BM000050 * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AK);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WN41XH); 

%macro etls_scdloader;

   /* Create miscellaneous loader macros   */ 
   %global etls_tableExist;
   %global etls_numIndex;
   %global etls_lastTable;
   %let etls_tableExist = -1; 
   %let etls_numIndex = -1; 
   %let etls_lastTable = &SYSLAST; 
   
   /*---- Define load data macro  ----*/ 
   
   %let etls_tableOptions = ;
   
   /*---- Set the load time column  ----*/ 
   %let etls_jobLoadTime = &SYSDATE9.:&SYSTIME;
   %let etls_loadTime = &etls_jobLoadTime; 
   data _null_;
      _loadtime = input("&etls_LoadTime",DATETIME20.);
      put "NOTE: The load time is: " _loadtime nldatm.;
   run;
   
   /* Determine if the table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(etl_sys.SOURCE_SYSTEM, DATA)) or 
         %sysfunc(exist(etl_sys.SOURCE_SYSTEM, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data etl_sys.SOURCE_SYSTEM
              (dbnull = (
                         SOURCE_SYSTEM_CD = NO
                         VALID_FROM_DTTM = NO
                         LANGUAGE_CD = NO
                         PROCESSED_DTTM = NO
                         VALID_TO_DTTM = NO
                         SOURCE_SYSTEM_DESC = YES
                         X_SOURCE_SYSTEM_NO = NO));
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib LANGUAGE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LANGUAGE_CD'; 
         attrib PROCESSED_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'PROCESSED_DTTM'; 
         attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib SOURCE_SYSTEM_DESC length = $100
            format = $100.
            informat = $100.
            label = 'SOURCE_SYSTEM_DESC'; 
         attrib X_SOURCE_SYSTEM_NO length = 8
            format = 11.
            informat = 11.
            label = 'X_SOURCE_SYSTEM_NO'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Create the indexes for a table  ----*/ 
      %put %str(NOTE: Creating indexes ...);
      %macro etls_createIndexes;
         proc sql; 
            connect to ORACLE
            ( 
                DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
            ); 
            reset noprint; 
            execute 
            ( 
               create UNIQUE index SYS_C0011156
                  on ETL_SYS.SOURCE_SYSTEM
                       (LANGUAGE_CD, 
                                             SOURCE_SYSTEM_CD, 
                                             VALID_FROM_DTTM) 
                     %if %symexist(etls_TSA5VLIHEZ_BY00002X) %then &etls_TSA5VLIHEZ_BY00002X;
            ) by ORACLE; 
            
            %rcSet(&sqlrc); 
            
            execute 
            ( 
               create UNIQUE index XRefWEFBL7J
                  on ETL_SYS.SOURCE_SYSTEM
                       (SOURCE_SYSTEM_CD, 
                                             LANGUAGE_CD, 
                                             VALID_FROM_DTTM) 
                     %if %symexist(etls_TSA5VLIHEZ__0002758) %then &etls_TSA5VLIHEZ__0002758;
            ) by ORACLE; 
            
            %rcSet(&sqlrc); 
            
            disconnect from ORACLE; 
         quit; 
         
         %rcSet(&sqlrc); 
         
      %mend etls_createIndexes;
      %etls_createIndexes;
      
      /*---- Create the integrity constraints for a table  ----*/ 
      %put %str(NOTE: Creating integrity constraints ...);
      proc sql;
         connect to ORACLE
         ( 
             DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            alter table ETL_SYS.SOURCE_SYSTEM      
               add primary key (SOURCE_SYSTEM_CD, 
                                 VALID_FROM_DTTM, 
                                 LANGUAGE_CD)
               add unique (SOURCE_SYSTEM_CD, 
                                 VALID_FROM_DTTM, 
                                 X_SOURCE_SYSTEM_NO)
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit;
      
      %rcSet(&sqlrc); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Temporary cross reference table being used  ----*/ 
   /* Delete any existing temporary cross-reference table  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_sortedxref;
   quit;
   
   /* Generate change digest (v1.1)  */ 
   data work.etls_sortedxref(keep =  SOURCE_SYSTEM_CD LANGUAGE_CD VALID_FROM_DTTM VALID_TO_DTTM DIGEST_VALUE);
   
      length etls_md5 $16.;
      length DIGEST_VALUE $32.;
      
      set etl_sys.SOURCE_SYSTEM(keep = SOURCE_SYSTEM_CD LANGUAGE_CD VALID_FROM_DTTM VALID_TO_DTTM  
       SOURCE_SYSTEM_DESC X_SOURCE_SYSTEM_NO);
      
      by SOURCE_SYSTEM_CD LANGUAGE_CD VALID_TO_DTTM;
      
      if last.LANGUAGE_CD;
      
      etls_str = '"' ||KTRIM(KLEFT(SOURCE_SYSTEM_DESC)) 
            || KTRIM(KLEFT(X_SOURCE_SYSTEM_NO)) || '"';
      etls_md5 = md5(etls_str);
      DIGEST_VALUE = put(etls_md5, hex32.);
   
   run;
   
   %rcSet(&syscc); 
   
   %rcSet(&sqlrc); 
   
   /* Generate change digest (v1.1)  */ 
   data work.etls_source(drop=etls_str etls_md5 );
      set work.WN41XH;
      length etls_md5 $16.;
      length DIGEST_VALUE $32.;
      etls_str = '"' ||KTRIM(KLEFT(SOURCE_SYSTEM_DESC)) 
            || KTRIM(KLEFT(X_SOURCE_SYSTEM_NO)) || '"';
      etls_md5 = MD5(etls_str);
      DIGEST_VALUE=put(etls_md5, hex32.);
   run;
   
   %rcSet(&syscc); 
   
   /* Generate the from date expression  */ 
   %let etls_begdate = %SYSFUNC(DATETIME());
   /* Generate the default to date expression  */ 
   %let etls_enddate = '01JAN5999:00:00:00'DT;
   
   /* Sort the source table by business key and beginning/from date columns.  */ 
   proc sort data=work.etls_source;
      by SOURCE_SYSTEM_CD LANGUAGE_CD VALID_FROM_DTTM;
   run;
   
   %rcSet(&syserr); 
   
   /*---- Set beginning dates and close out any history records   ----*/ 
   data work.etls_source (drop = etls_sameday etls_cnt etls_closedate);
   
      set work.etls_source;
      by SOURCE_SYSTEM_CD LANGUAGE_CD;
      
      /* Set beginning dates if null  */ 
      if VALID_FROM_DTTM eq . then
         VALID_FROM_DTTM = &etls_begdate;
         
      if first.LANGUAGE_CD then
         etls_cnt = 0;
      else
         etls_cnt + 1;
         
      /* Close out any history records if they exist  */ 
      if not last.LANGUAGE_CD then
      do;
      
         obsnum = _n_ + 1;
         set work.etls_source(keep = VALID_FROM_DTTM
                  rename = (VALID_FROM_DTTM = etls_closedate))
                  point = obsnum;
                  
         if etls_closedate eq . then
            etls_closedate = &etls_begdate;
            
         if VALID_FROM_DTTM eq etls_closedate then
            etls_closedate = etls_closedate + (etls_cnt + 1);
            
         if VALID_TO_DTTM eq . then
            VALID_TO_DTTM = etls_closedate - 1;
            
      end;
      
      /* Fix the beginning dates if needed  */ 
      etls_sameday = lag1(VALID_FROM_DTTM);
      if not first.LANGUAGE_CD and etls_sameday eq VALID_FROM_DTTM then
         VALID_FROM_DTTM = VALID_FROM_DTTM + etls_cnt;
         
   run;
   
   %rcSet(&syserr); 
   
   /*---- Slowly Changing Dimension Type 2 Beginning/End Date Method  ----*/ 
   /* Data merge the cross-reference and source tables  */ 
   data work.etls_newrcds
          (drop = ETLS_STGDIGEST DIGEST_VALUE ETLS_FROMDATE ETLS_CLSDATE ETLS_TODATE 
                     ETLS_LOADTIME)
      work.etls_match
          (drop = ETLS_STGDIGEST DIGEST_VALUE ETLS_FROMDATE ETLS_CLSDATE ETLS_TODATE 
                     ETLS_LOADTIME)
      work.etls_close
          (keep = SOURCE_SYSTEM_CD LANGUAGE_CD ETLS_FROMDATE ETLS_CLSDATE 
                     ETLS_LOADTIME)
      ;
      merge work.etls_source(in=inSort rename=(DIGEST_VALUE = ETLS_STGDIGEST))
         work.etls_sortedxref (in=inXref rename=(
               VALID_FROM_DTTM = ETLS_FROMDATE
               VALID_TO_DTTM = ETLS_TODATE));
      by SOURCE_SYSTEM_CD LANGUAGE_CD;
      
      attrib ETLS_CLSDATE length=8 format = DATETIME20. informat = DATETIME20.;
      ;
      attrib ETLS_LOADTIME length=8 format = DATETIME20. informat = DATETIME20.;
      
      /* Process changes made to existing records  */ 
      if inSort and inXref then
      do;
      
         if ETLS_STGDIGEST NE DIGEST_VALUE then
         do;
         
            if VALID_FROM_DTTM eq . then
               VALID_FROM_DTTM = &etls_begdate;
               
            /* Ignore history records, only accept changes where the cross reference  */ 
            /*  beginning date is less than the source beginning date                 */ 
            if ETLS_FROMDATE < VALID_FROM_DTTM then
            do;
            
               if VALID_TO_DTTM eq . then
                  VALID_TO_DTTM = &etls_enddate;
                  
               PROCESSED_DTTM = input("&etls_loadtime", datetime20.);
               ETLS_LOADTIME = input("&etls_loadtime", datetime20.);
               
               /* Save off the close date  */ 
               if ETLS_TODATE = &etls_enddate or ETLS_TODATE > VALID_FROM_DTTM then
               do;
               
                  if ETLS_FROMDATE < VALID_FROM_DTTM then
                     ETLS_CLSDATE = VALID_FROM_DTTM - 1;
                  else ETLS_CLSDATE = ETLS_FROMDATE;
                  
                  output work.etls_close;
                  
               end;
               
               /* Overwrite the values to compare new records with from cross-reference   */ 
               /* variable values to the new current values from source  */ 
               DIGEST_VALUE = ETLS_STGDIGEST;
               ETLS_FROMDATE = VALID_FROM_DTTM;
               ETLS_TODATE = VALID_TO_DTTM;
               
               output work.etls_match;
               
            end;
            
         end;/*  End of digest values not equal   */ 
         
         
         else do;
         
            if VALID_TO_DTTM ne . then
            do;
            
               /* If the cross-reference end date is greater then the source end date then  */ 
               /*  close out the target record with the source end date                     */ 
               if last.LANGUAGE_CD then
                  if ETLS_TODATE gt VALID_TO_DTTM then
                  do;
                  
                     ETLS_CLSDATE = VALID_TO_DTTM;
                     ETLS_LOADTIME = input("&etls_loadtime", datetime20.);
                     
                     output work.etls_close;
                     
                  end;
                  
            end;
            
            /* If the source beginning date is greater then both the cross-reference  */ 
            /*  beginning and end date, then reactivate the closed out record         */ 
            if VALID_FROM_DTTM gt ETLS_FROMDATE and
               VALID_FROM_DTTM gt ETLS_TODATE then
            do;
            
               if VALID_TO_DTTM eq . then
                  VALID_TO_DTTM = &etls_enddate;
                  
               PROCESSED_DTTM = input("&etls_loadtime", datetime20.);
               /* Update the cross-reference varaibles to the new current values  */ 
               DIGEST_VALUE = ETLS_STGDIGEST;
               ETLS_FROMDATE = VALID_FROM_DTTM;
               ETLS_TODATE = VALID_TO_DTTM;
               
               output work.etls_match;
               
            end;
            
         end;  /* End of digest values are equal  */ 
         
      end;  /* End of inSort and inXref  */ 
      
      /* Process new records  */ 
      else if inSort and not inXref then 
      do;
      
         if VALID_FROM_DTTM eq . then
            VALID_FROM_DTTM = &etls_begdate;
         if VALID_TO_DTTM eq . then 
            VALID_TO_DTTM = &etls_enddate;
            
         PROCESSED_DTTM = input("&etls_loadtime", datetime20.);
         
         output work.etls_newrcds;
         
      end;
      
   run;
   
   %rcSet(&syserr); 
   
   /* Sort the output from the data merge step  */ 
   proc sort data=work.etls_close nodupkey;
      by SOURCE_SYSTEM_CD LANGUAGE_CD descending ETLS_FROMDATE;
   run;
   %rcSet(&syserr); 
   
   proc sort data=work.etls_match nodupkey;
      by SOURCE_SYSTEM_CD LANGUAGE_CD descending VALID_FROM_DTTM;
   run;
   %rcSet(&syserr); 
   
   /* Save record counts into macros  */ 
   %let etls_recCheckExist = 0; 
   %let etls_updatecnt = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(work.etls_close, DATA)) or 
            %sysfunc(exist(work.etls_close, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         proc contents data = work.etls_close out = work.etls_contents(keep = nobs) noprint; 
         run; 
         
         data _null_; 
            set work.etls_contents (obs = 1); 
            call symput("etls_updatecnt", left(put(nobs,32.))); 
         run;
         
         proc datasets lib = work nolist nowarn memtype = (data view);
            delete etls_contents;
         quit;
         
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   %rcSet(&syserr); 
   
   %let etls_recCheckExist = 0; 
   %let etls_matchcnt = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(work.etls_match, DATA)) or 
            %sysfunc(exist(work.etls_match, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         proc contents data = work.etls_match out = work.etls_contents(keep = nobs) noprint; 
         run; 
         
         data _null_; 
            set work.etls_contents (obs = 1); 
            call symput("etls_matchcnt", left(put(nobs,32.))); 
         run;
         
         proc datasets lib = work nolist nowarn memtype = (data view);
            delete etls_contents;
         quit;
         
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   %rcSet(&syserr); 
   
   %let etls_recCheckExist = 0; 
   %let etls_newcnt = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(work.etls_newrcds, DATA)) or 
            %sysfunc(exist(work.etls_newrcds, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         proc contents data = work.etls_newrcds out = work.etls_contents(keep = nobs) noprint; 
         run; 
         
         data _null_; 
            set work.etls_contents (obs = 1); 
            call symput("etls_newcnt", left(put(nobs,32.))); 
         run;
         
         proc datasets lib = work nolist nowarn memtype = (data view);
            delete etls_contents;
         quit;
         
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   %rcSet(&syserr); 
   
   /* Check to see if the update counts are greater than zero  */ 
   %if &etls_updatecnt le 0 and &etls_matchcnt le 0 and &etls_newcnt le 0 
      %then %goto scdldout;
      
   /*---- Start of target table update  ----*/ 
   %macro etls_pushToDBMS();
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = etl_sys nolist nowarn memtype = (data view);
         delete WEFBMNU;
      quit;
      
      %rcSet(&syserr); 
      
      /*---- Create a new table  ----*/ 
      data etl_sys.WEFBMNU
              (dbnull = (
                         SOURCE_SYSTEM_CD = NO
                         LANGUAGE_CD = NO
                         ETLS_FROMDATE = NO
                         ETLS_CLSDATE = NO
                         ETLS_LOADTIME = NO));
         attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
         attrib LANGUAGE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LANGUAGE_CD'; 
         attrib ETLS_FROMDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
         attrib ETLS_CLSDATE length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
         attrib ETLS_LOADTIME length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'PROCESSED_DTTM'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
      proc append base = etl_sys.WEFBMNU
         data = work.ETLS_CLOSE force; 
      run;
      
      %rcSet(&syserr); 
      
   %mend etls_pushToDBMS;
   %etls_pushToDBMS;
   
   %if &etls_matchcnt gt 0 %then
   %do;
   
      /* Delete the work table  */ 
      proc datasets lib=etl_sys nolist nowarn memtype = (data view);
         delete WEFBMCQ;
      quit;
      
      data etl_sys.WEFBMCQ (DBNULL=(SOURCE_SYSTEM_CD = NO 
          VALID_FROM_DTTM = NO 
          LANGUAGE_CD = NO 
          PROCESSED_DTTM = NO 
          VALID_TO_DTTM = NO 
          X_SOURCE_SYSTEM_NO = NO 
          ));
            attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
            attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
            attrib LANGUAGE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LANGUAGE_CD'; 
            attrib PROCESSED_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'PROCESSED_DTTM'; 
            attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
            attrib SOURCE_SYSTEM_DESC length = $100
            format = $100.
            informat = $100.
            label = 'SOURCE_SYSTEM_DESC'; 
            attrib X_SOURCE_SYSTEM_NO length = 8
            format = 11.
            informat = 11.
            label = 'X_SOURCE_SYSTEM_NO'; 
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Append the records into the temporary table  ----*/ 
      proc append base = etl_sys.WEFBMCQ
         data = work.etls_match force;
      run;
      
      %rcSet(&syserr); 
      
   %end;
   
   %if &etls_newcnt gt 0 %then
   %do;
   
      /* Delete the work table  */ 
      proc datasets lib=etl_sys nolist nowarn memtype = (data view);
         delete WEFBM76;
      quit;
      
      data etl_sys.WEFBM76 (DBNULL=(SOURCE_SYSTEM_CD = NO 
          VALID_FROM_DTTM = NO 
          LANGUAGE_CD = NO 
          PROCESSED_DTTM = NO 
          VALID_TO_DTTM = NO 
          X_SOURCE_SYSTEM_NO = NO 
          ));
            attrib SOURCE_SYSTEM_CD length = $3
            format = $3.
            informat = $3.
            label = 'SOURCE_SYSTEM_CD'; 
            attrib VALID_FROM_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_FROM_DTTM'; 
            attrib LANGUAGE_CD length = $3
            format = $3.
            informat = $3.
            label = 'LANGUAGE_CD'; 
            attrib PROCESSED_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'PROCESSED_DTTM'; 
            attrib VALID_TO_DTTM length = 8
            format = DATETIME20.
            informat = DATETIME20.
            label = 'VALID_TO_DTTM'; 
            attrib SOURCE_SYSTEM_DESC length = $100
            format = $100.
            informat = $100.
            label = 'SOURCE_SYSTEM_DESC'; 
            attrib X_SOURCE_SYSTEM_NO length = 8
            format = 11.
            informat = 11.
            label = 'X_SOURCE_SYSTEM_NO'; 
         stop;
      run;
      
      %rcSet(&syserr); 
      
      /*---- Append the records into the temporary table  ----*/ 
      proc append base = etl_sys.WEFBM76
         data = work.etls_newrcds force;
      run;
      
      %rcSet(&syserr); 
      
   %end;
   
   /* Update the target table using SQL pass-thru  */ 
   proc sql ;
      /* Close out existing records  */ 
      connect to ORACLE
      ( 
          DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" ); 
      %if &etls_updatecnt gt 0 %then
      %do;
      
         execute 
         ( 
               update ETL_SYS.SOURCE_SYSTEM
                  set VALID_TO_DTTM = (
                     select ETLS_CLSDATE
                        from WEFBMNU
                        where SOURCE_SYSTEM_CD = SOURCE_SYSTEM.SOURCE_SYSTEM_CD
                                 and LANGUAGE_CD = SOURCE_SYSTEM.LANGUAGE_CD
                                 and ETLS_FROMDATE = SOURCE_SYSTEM.VALID_FROM_DTTM )
                  where exists ( select 1
                        from WEFBMNU
                        where SOURCE_SYSTEM_CD = SOURCE_SYSTEM.SOURCE_SYSTEM_CD
                                 and LANGUAGE_CD = SOURCE_SYSTEM.LANGUAGE_CD
                                 and ETLS_FROMDATE = SOURCE_SYSTEM.VALID_FROM_DTTM)) by ORACLE; 
               
               %rcSet(&sqlrc); 
               
               /* Update the load time column  */ 
               execute 
               ( 
                  update ETL_SYS.SOURCE_SYSTEM
                     set PROCESSED_DTTM = (
                        select ETLS_LOADTIME
                           from WEFBMNU
                           where SOURCE_SYSTEM_CD = SOURCE_SYSTEM.SOURCE_SYSTEM_CD
                                    and LANGUAGE_CD = SOURCE_SYSTEM.LANGUAGE_CD
                                    and ETLS_FROMDATE = SOURCE_SYSTEM.VALID_FROM_DTTM )
                     where exists ( select 1 
                           from WEFBMNU
                           where SOURCE_SYSTEM_CD = SOURCE_SYSTEM.SOURCE_SYSTEM_CD
                                    and LANGUAGE_CD = SOURCE_SYSTEM.LANGUAGE_CD
                                    and ETLS_FROMDATE = SOURCE_SYSTEM.VALID_FROM_DTTM)) by ORACLE; 
                  
                  %rcSet(&sqlrc); 
                  
         %end;
         %else %do;
         
            %put %str(NOTE: No records on target table were closed.);
            
         %end;
         /* Insert the new matching records  */ 
         %if &etls_matchcnt gt 0 %then
         %do;
         
            execute 
            ( 
               insert into ETL_SYS.SOURCE_SYSTEM
                  ( SOURCE_SYSTEM_CD, VALID_FROM_DTTM, LANGUAGE_CD, PROCESSED_DTTM, 
                        VALID_TO_DTTM, SOURCE_SYSTEM_DESC, X_SOURCE_SYSTEM_NO )
                  
                  Select SOURCE_SYSTEM_CD, 
                        VALID_FROM_DTTM, 
                        LANGUAGE_CD, 
                        PROCESSED_DTTM, 
                        VALID_TO_DTTM, 
                        SOURCE_SYSTEM_DESC, 
                        X_SOURCE_SYSTEM_NO
                  from WEFBMCQ) by ORACLE; 
            
            %rcSet(&sqlrc); 
            
         %end;
         
         /* Insert the new dimension records  */ 
         %if &etls_newcnt gt 0 %then
         %do;
         
            execute 
            ( 
               insert into ETL_SYS.SOURCE_SYSTEM
                  ( SOURCE_SYSTEM_CD, VALID_FROM_DTTM, LANGUAGE_CD, PROCESSED_DTTM, 
                        VALID_TO_DTTM, SOURCE_SYSTEM_DESC, X_SOURCE_SYSTEM_NO )
                  
                  select SOURCE_SYSTEM_CD, 
                        VALID_FROM_DTTM, 
                        LANGUAGE_CD, 
                        PROCESSED_DTTM, 
                        VALID_TO_DTTM, 
                        SOURCE_SYSTEM_DESC, 
                        X_SOURCE_SYSTEM_NO
                  from WEFBM76) by ORACLE; 
            
            %rcSet(&sqlrc); 
            
         %end;
         %else %do;
         
            %put %str(NOTE: No new dimension records were added to target table.);
            
         %end;
         
         
         disconnect from ORACLE; 
      quit;
      
      /* Delete the work tables  */ 
      proc datasets lib=etl_sys nolist nowarn memtype = (data view);
         delete WEFBMNU;
         delete WEFBMCQ;
         delete WEFBM76;
      quit;
      
      /* Delete the work tables  */ 
      %if &etls_debug eq 0 %then
      %do;
      
         proc datasets lib=work nolist nowarn memtype = (data view);
            delete etls_newrcds;
            delete etls_match;
            delete etls_close;
         quit;
         
      %end;
      
      %let etls_lastTable = %nrquote(etl_sys.SOURCE_SYSTEM);
      
      %if &etls_debug lt 2 %then
      %do;
      
         proc datasets lib=work nolist nowarn memtype = (data view);
            delete etls_sortedxref;
            delete etls_source;
         quit;
         
      %end;
      
      %goto scdldout;
      %error:
         %let sysrc = 9999;
         %rcSet(&sysrc); 
         
      %scdldout:
   %mend etls_scdloader;
   
   /* Execute the SCD Type 2 Loader  */ 
   %etls_scdloader;
   
   
      
      /** Step end SCD Type 2 **/
      
      /*==========================================================================* 
 * Step:            Завершить модуль                      A5VLIHEZ.BT0000AL * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AL);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;
   %etl_job_finish;
%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_400_3_Setup_SOURCE_SYSTEM **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000037);
%let etls_jobName = %nrquote(001_400_Setup_Other);

/**************************************************************************** 
 * Job:             001_400_4_Setup_CALENDAR              A5VLIHEZ.BS00002Y * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_400_Setup_Other                       * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Target Table:    CALENDAR - etl_sys.CALENDAR           A5VLIHEZ.BM000048 * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:23:21 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS00002Y);
%let etls_jobName = %nrquote(001_400_4_Setup_CALENDAR);
%let etls_userID = %nrquote(sasmi);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(rusrpomag01.rus.sas.com);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5VLIHEZ.BT0000AM * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AM);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_job_start.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Регистрирует начало модуля ETL.
*
*  ПАРАМЕТРЫ:
*     нет
*
******************************************************************/

%macro transform_job_start;
   %etl_job_start;
%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Начать модуль **/

/*==========================================================================* 
 * Step:            User Written                          A5VLIHEZ.BT0000AN * 
 * Transform:       User Written                                            * 
 * Description:     Create Calendar                                         * 
 *                                                                          * 
 * Target Table:    CALENDAR - etl_sys.CALENDAR           A5VLIHEZ.BM000048 * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AN);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0;
%let _OUTPUT_count = 1;
%let _OUTPUT = etl_sys.CALENDAR;
%let _OUTPUT_connect =  DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
;
%let _OUTPUT_engine = ORACLE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/DWH_DWF/Tables/ETL_SYS/CALENDAR%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = curr_dt curr_dttm start_wk_mon_dt start_wk_mon_dttm start_wk_tue_dt 
        start_wk_tue_dttm;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = curr_dt;
%let _OUTPUT_col0_table = etl_sys.CALENDAR;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = DATE9.;
%let _OUTPUT_col0_informat = DATE9.;
%let _OUTPUT_col0_label = %nrquote(curr_dt);
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_col1_name = curr_dttm;
%let _OUTPUT_col1_table = etl_sys.CALENDAR;
%let _OUTPUT_col1_length = 8;
%let _OUTPUT_col1_type = ;
%let _OUTPUT_col1_format = DATETIME25.6;
%let _OUTPUT_col1_informat = DATETIME25.6;
%let _OUTPUT_col1_label = %nrquote(curr_dttm);
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input_count = 0;
%let _OUTPUT_col2_name = start_wk_mon_dt;
%let _OUTPUT_col2_table = etl_sys.CALENDAR;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = DATE9.;
%let _OUTPUT_col2_informat = DATE9.;
%let _OUTPUT_col2_label = %nrquote(start_wk_mon_dt);
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input_count = 0;
%let _OUTPUT_col3_name = start_wk_mon_dttm;
%let _OUTPUT_col3_table = etl_sys.CALENDAR;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = DATETIME25.6;
%let _OUTPUT_col3_informat = DATETIME25.6;
%let _OUTPUT_col3_label = %nrquote(start_wk_mon_dttm);
%let _OUTPUT_col3_exp = ;
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = start_wk_tue_dt;
%let _OUTPUT_col4_table = etl_sys.CALENDAR;
%let _OUTPUT_col4_length = 8;
%let _OUTPUT_col4_type = ;
%let _OUTPUT_col4_format = DATE9.;
%let _OUTPUT_col4_informat = DATE9.;
%let _OUTPUT_col4_label = %nrquote(start_wk_tue_dt);
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input_count = 0;
%let _OUTPUT_col5_name = start_wk_tue_dttm;
%let _OUTPUT_col5_table = etl_sys.CALENDAR;
%let _OUTPUT_col5_length = 8;
%let _OUTPUT_col5_type = ;
%let _OUTPUT_col5_format = DATETIME25.6;
%let _OUTPUT_col5_informat = DATETIME25.6;
%let _OUTPUT_col5_label = %nrquote(start_wk_tue_dttm);
%let _OUTPUT_col5_exp = ;
%let _OUTPUT_col5_input_count = 0;
%let _OUTPUT_filetype = PhysicalTable;

%let _OUTPUT1 = etl_sys.CALENDAR;
%let _OUTPUT1_connect =  DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
;
%let _OUTPUT1_engine = ORACLE;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/DWH_DWF/Tables/ETL_SYS/CALENDAR%(Table%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = curr_dt curr_dttm start_wk_mon_dt start_wk_mon_dttm start_wk_tue_dt 
        start_wk_tue_dttm;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = curr_dt;
%let _OUTPUT1_col0_table = etl_sys.CALENDAR;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = DATE9.;
%let _OUTPUT1_col0_informat = DATE9.;
%let _OUTPUT1_col0_label = %nrquote(curr_dt);
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_col1_name = curr_dttm;
%let _OUTPUT1_col1_table = etl_sys.CALENDAR;
%let _OUTPUT1_col1_length = 8;
%let _OUTPUT1_col1_type = ;
%let _OUTPUT1_col1_format = DATETIME25.6;
%let _OUTPUT1_col1_informat = DATETIME25.6;
%let _OUTPUT1_col1_label = %nrquote(curr_dttm);
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input_count = 0;
%let _OUTPUT1_col2_name = start_wk_mon_dt;
%let _OUTPUT1_col2_table = etl_sys.CALENDAR;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = DATE9.;
%let _OUTPUT1_col2_informat = DATE9.;
%let _OUTPUT1_col2_label = %nrquote(start_wk_mon_dt);
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input_count = 0;
%let _OUTPUT1_col3_name = start_wk_mon_dttm;
%let _OUTPUT1_col3_table = etl_sys.CALENDAR;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = DATETIME25.6;
%let _OUTPUT1_col3_informat = DATETIME25.6;
%let _OUTPUT1_col3_label = %nrquote(start_wk_mon_dttm);
%let _OUTPUT1_col3_exp = ;
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = start_wk_tue_dt;
%let _OUTPUT1_col4_table = etl_sys.CALENDAR;
%let _OUTPUT1_col4_length = 8;
%let _OUTPUT1_col4_type = ;
%let _OUTPUT1_col4_format = DATE9.;
%let _OUTPUT1_col4_informat = DATE9.;
%let _OUTPUT1_col4_label = %nrquote(start_wk_tue_dt);
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input_count = 0;
%let _OUTPUT1_col5_name = start_wk_tue_dttm;
%let _OUTPUT1_col5_table = etl_sys.CALENDAR;
%let _OUTPUT1_col5_length = 8;
%let _OUTPUT1_col5_type = ;
%let _OUTPUT1_col5_format = DATETIME25.6;
%let _OUTPUT1_col5_informat = DATETIME25.6;
%let _OUTPUT1_col5_label = %nrquote(start_wk_tue_dttm);
%let _OUTPUT1_col5_exp = ;
%let _OUTPUT1_col5_input_count = 0;
%let _OUTPUT1_filetype = PhysicalTable;

/*---- Start of User Written Code  ----*/ 

%macro CreateCalendar;
/* Determine if the target table exists  */ 
%let etls_tableExist = %eval(%sysfunc(exist(&_OUTPUT, DATA)) or %sysfunc(exist(&_OUTPUT, VIEW))); 

%if &etls_tableExist %then %do;
	proc sql;
		drop table &_OUTPUT.;
	quit;
%end;


data &_OUTPUT.;
   length curr_dt curr_dttm start_wk_mon_dt start_wk_mon_dttm start_wk_tue_dt start_wk_tue_dttm 8;
   format start_wk_mon_dttm start_wk_tue_dttm curr_dttm datetime20. start_wk_mon_dt start_wk_tue_dt curr_dt date9.;


   do curr_dt = &ETL_DWH_INIT_DT to &ETL_MAX_DT;
		curr_dttm = dhms (curr_dt,  0, 00, 0);

		start_wk_mon_dt = intnx('week.2', curr_dt, 0,'b');
		start_wk_mon_dttm = dhms (start_wk_mon_dt,  0, 00, 0);

		start_wk_tue_dt = intnx('week.3', curr_dt, 0,'b');
		start_wk_tue_dttm = dhms (start_wk_tue_dt,  0, 00, 0);

        output;

   end;
run;

%mend CreateCalendar;

%CreateCalendar;

/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/** Step end User Written **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5VLIHEZ.BT0000AO * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AO);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;
   %etl_job_finish;
%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_400_4_Setup_CALENDAR **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000037);
%let etls_jobName = %nrquote(001_400_Setup_Other);

/**************************************************************************** 
 * Job:             001_400_6_Setup_ERROR_LOG             A5VLIHEZ.BS000030 * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: rusrpomag01.rus.sas.com                                 * 
 * Port:            8561                                                    * 
 * Location:        /DWH_DWF/Jobs/001_400_Setup_Other                       * 
 *                                                                          * 
 * Server:          SASApp                                A5VLIHEZ.AT000002 * 
 *                                                                          * 
 * Target Table:    ERROR_LOG - etl_sys.ERROR_LOG         A5VLIHEZ.BM000049 * 
 *                                                                          * 
 * Generated on:    7 апреля 2020 г. 17:23:21 MSK                           * 
 * Generated by:    sasmi                                                   * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A5VLIHEZ.BS000030);
%let etls_jobName = %nrquote(001_400_6_Setup_ERROR_LOG);
%let etls_userID = %nrquote(sasmi);


/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(rusrpomag01.rus.sas.com);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Начать модуль                         A5VLIHEZ.BT0000AS * 
 * Transform:       Начать модуль                                           * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AS);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_job_start.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Регистрирует начало модуля ETL.
*
*  ПАРАМЕТРЫ:
*     нет
*
******************************************************************/

%macro transform_job_start;
   %etl_job_start;
%mend transform_job_start;

%transform_job_start;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Начать модуль **/

/*==========================================================================* 
 * Step:            Create CHECK_LAST_DTTM                A5VLIHEZ.BT0000AT * 
 * Transform:       User Written                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Target Table:    User Written - work.WFXPZNG           A5VLIHEZ.BV00003R * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AT);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0;
%let _OUTPUT_count = 1;
%let _OUTPUT = work.WFXPZNG;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A5VLIHEZ.BV00003R%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = CHECK_LAST_DTTM;
%let _OUTPUT_col_count = 1;
%let _OUTPUT_col0_name = CHECK_LAST_DTTM;
%let _OUTPUT_col0_table = work.WFXPZNG;
%let _OUTPUT_col0_length = 8;
%let _OUTPUT_col0_type = ;
%let _OUTPUT_col0_format = Datetime22.;
%let _OUTPUT_col0_informat = Datetime22.;
%let _OUTPUT_col0_label = %nrquote(Дата-время последней проверки);
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input_count = 0;
%let _OUTPUT_filetype = WorkTable;

%let _OUTPUT1 = work.WFXPZNG;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A5VLIHEZ.BV00003R%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = CHECK_LAST_DTTM;
%let _OUTPUT1_col_count = 1;
%let _OUTPUT1_col0_name = CHECK_LAST_DTTM;
%let _OUTPUT1_col0_table = work.WFXPZNG;
%let _OUTPUT1_col0_length = 8;
%let _OUTPUT1_col0_type = ;
%let _OUTPUT1_col0_format = Datetime22.;
%let _OUTPUT1_col0_informat = Datetime22.;
%let _OUTPUT1_col0_label = %nrquote(Дата-время последней проверки);
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input_count = 0;
%let _OUTPUT1_filetype = WorkTable;

/*---- Start of User Written Code  ----*/ 

data &_OUTPUT.;
  attrib CHECK_LAST_DTTM length = 8 format = Datetime20. label = 'Дата-время последней проверки';
		CHECK_LAST_DTTM = &ETL_CURRENT_DTTM.;
run;
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/** Step end Create CHECK_LAST_DTTM **/

/*==========================================================================* 
 * Step:            Extract                               A5VLIHEZ.BT0000AU * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    User Written - work.WFXPZNG           A5VLIHEZ.BV00003R * 
 * Target Table:    Extract - work.WFJPQ6W                A5VLIHEZ.BV00003S * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AU);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WFXPZNG); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WFJPQ6W;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WFJPQ6W as
      select
         CHECK_LAST_DTTM
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.WFJPQ6W;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/** Step end Extract **/

/*==========================================================================* 
 * Step:            Table Loader                          A5VLIHEZ.BT0000AV * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.WFJPQ6W                A5VLIHEZ.BV00003S * 
 * Target Table:    ERROR_LOG - etl_sys.ERROR_LOG         A5VLIHEZ.BM000049 * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AV);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.WFJPQ6W); 

%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - Truncate
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(etl_sys.ERROR_LOG, DATA)) or 
         %sysfunc(exist(etl_sys.ERROR_LOG, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data etl_sys.ERROR_LOG
              (dbnull = (
                         CHECK_LAST_DTTM = YES));
         attrib CHECK_LAST_DTTM length = 8
            format = Datetime22.
            informat = Datetime22.
            label = 'Дата-время последней проверки'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %else 
   %do;  /* table exists */ 
      /*---- Truncate a table  ----*/ 
      %put %str(NOTE: Truncating table ...);
      proc sql;
         connect to ORACLE
         ( 
             DEFER=YES DBSERVER_MAX_BYTES=1 DBCLIENT_MAX_BYTES=1 PATH='rusrpomag01.rus.sas.com:1521/rpo01.rus.sas.com' AUTHDOMAIN="DwhAuth_ETL_SYS" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            truncate table ETL_SYS.ERROR_LOG
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit; 
      
      %rcSet(&sqlrc); 
      
   %end; /* table exists */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = etl_sys.ERROR_LOG 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
%mend etls_loader;
%etls_loader;



/** Step end Table Loader **/

/*==========================================================================* 
 * Step:            Завершить модуль                      A5VLIHEZ.BT0000AW * 
 * Transform:       Завершить модуль                                        * 
 * Description:                                                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT0000AW);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
* ВЕРСИЯ:
*   $Id: transform_job_finish.sas 4050:7da4b3472aef 2015-08-10 09:37:44Z rusane $
*
******************************************************************
* НАЗНАЧЕНИЕ:
*   Регистрирует конец модуля ETL.
*
* ПАРАМЕТРЫ:
*   нет
*
******************************************************************/

%macro transform_job_finish;
   %etl_job_finish;
%mend transform_job_finish;

%transform_job_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Завершить модуль **/

%let etls_endTime = %sysfunc(datetime(),datetime.);



/**  Job end 001_400_6_Setup_ERROR_LOG **/

/* Reset jobid and name */
%let jobID = %quote(A5VLIHEZ.BS000037);
%let etls_jobName = %nrquote(001_400_Setup_Other);

/*==========================================================================* 
 * Step:            Завершить поток                       A5VLIHEZ.BT00007Q * 
 * Transform:       Завершить поток                                         * 
 * Description:     Закрывает поток загрузки                                * 
 *==========================================================================*/ 

%let transformID = %quote(A5VLIHEZ.BT00007Q);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let _INPUT_count = 0; 
%let _OUTPUT_count = 0; 

%let refDesc = ;

/*****************************************************************
*  ВЕРСИЯ:
*     $Id: transform_stream_finish.sas 3629:0a610733da87 2014-12-22 12:21:10Z rusane $
*
******************************************************************
*  НАЗНАЧЕНИЕ:
*     Регистрирует конец потока ETL.
*
*  ПАРАМЕТРЫ:
*     нет
*
******************************************************************/

%macro transform_stream_finish;
   %etl_stream_finish;
%mend transform_stream_finish;

%transform_stream_finish;


%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/** Step end Завершить поток **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

